# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IAef8vtqBZhvZ-HIDnCZLgN6NDYVRx97
"""

import torch
import cv2
import numpy as np
from PIL import Image
from diffusers import StableDiffusionInpaintPipeline
from google.colab import files
from google.colab.patches import cv2_imshow

# ‚úÖ Check CUDA availability
device = "cuda" if torch.cuda.is_available() else "cpu"

# ‚úÖ Load Face Detection Model
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# ‚úÖ Load Stable Diffusion Inpainting Model
print("üîÑ Loading Stable Diffusion Inpainting Model...")
model_id = "runwayml/stable-diffusion-inpainting"
pipe = StableDiffusionInpaintPipeline.from_pretrained(
    model_id,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32
).to(device)
print("‚úÖ Model Loaded Successfully!")

# ‚úÖ Function to capture an image (Upload in Colab)
def capture_image():
    print("üì∏ Please upload an image of the person.")
    uploaded = files.upload()  # Ask user to upload an image

    if uploaded:
        image_path = list(uploaded.keys())[0]  # Get uploaded file name
        print(f"‚úÖ Image {image_path} uploaded successfully!")
        return image_path
    else:
        print("‚ùå No image uploaded. Please try again.")
        return None

# ‚úÖ Function to detect faces and create a mask
def create_mask(image_path):
    image = cv2.imread(image_path)
    if image is None or image.size == 0:
        print("‚ùå Failed to read the image. Check the file path.")
        return None, None

    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5)

    if len(faces) == 0:
        print("‚ùå No face detected. Try again with a clearer image.")
        return None, None

    # Debug: Print face coordinates
    print(f"‚úÖ Detected {len(faces)} face(s). Coordinates: {faces}")

    # Create a white mask (everything can be changed)
    mask = np.ones_like(gray) * 255

    for (x, y, w, h) in faces:
        # Preserve the face by keeping this region black (unchanged)
        mask[max(0, y-50):y+h+50, max(0, x-50):x+w+50] = 0  # Expanded padding around face

        # Debug: Show detected face
        cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)

    cv2_imshow(image)  # Show detected face
    cv2_imshow(mask)   # Show the mask

    mask_path = "clothing_mask.png"
    cv2.imwrite(mask_path, mask)

    return mask_path, image_path

# ‚úÖ Function to generate AI-modified image (only changing clothing)
def generate_clothing_image(input_image_path, mask_path, prompt):
    try:
        torch.cuda.empty_cache()  # ‚úÖ Free GPU memory before running

        # ‚úÖ Load & Validate Image
        init_image = Image.open(input_image_path).convert("RGB").resize((512, 512))
        mask_image = Image.open(mask_path).convert("L").resize((512, 512))  # Load mask

        print("üé® Generating AI-modified clothing while keeping the face unchanged...")
        generated_image = pipe(
            prompt=prompt,
            image=init_image,
            mask_image=mask_image,
            num_inference_steps=30,
            guidance_scale=7.5
        ).images[0]

        # ‚úÖ Save generated image
        output_path = "generated_clothing_image.png"
        generated_image.save(output_path)
        print(f"‚úÖ Image generated and saved as: {output_path}")

        display(Image.open(output_path))  # Show final output in Colab
        return output_path
    except Exception as e:
        print(f"‚ùå Error generating image: {e}")
        return None

# ‚úÖ Main Function
def main():
    # Step 1: Capture Image (Upload in Colab)
    image_path = capture_image()
    if not image_path:
        return

    # Step 2: Create a Mask (Preserving Face, Changing Clothes)
    mask_path, processed_image = create_mask(image_path)
    if not mask_path:
        return

    # Step 3: Generate AI Image with the desired prompt
    prompt = "The boy is wearing a navy blue shirt with a white jacket. He also wears a black tie."
    generate_clothing_image(processed_image, mask_path, prompt)

# ‚úÖ Run the Program
if __name__ == "__main__":
    main()